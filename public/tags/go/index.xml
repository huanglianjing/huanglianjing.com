<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on huanglianjing</title>
    <link>http://huanglianjing.com/tags/go/</link>
    <description>Recent content in Go on huanglianjing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jul 2023 01:52:12 +0800</lastBuildDate><atom:link href="http://huanglianjing.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Pprof性能分析</title>
      <link>http://huanglianjing.com/posts/go-pprof%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 25 Jul 2023 01:52:12 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go-pprof%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>1. 简介 pprof 是 go 自带的一个对程序的性能进行可视化和分析的工具，它从 profile.proto 格式的采样数据集中读取数据，并生成可视化报告，帮助我们分析我们的程序性能，进而有所针对进行优化。
当服务在运行时，有时候会遇到内存占用越来越大、将机器的CPU占满、goroutine数量暴涨的情况，或者当我们准备针对已有的代码进行运行效率、内存占用等方面进行优化，这时候就是 pprof 可以派上用场的时候了。
pprof 的采集方式分为以下几种：
runtime/pprof：采集程序指定区块的运行数据，生成 profile.proto 文件并对其进行分析。 net/http/pprof：基于 HTTP Server 运行，并且可以采集运行时数据进行分析。 go test：通过运行测试用例，并指定所需标识来进行采集。 pprof 可以分析包含以下几种：
CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置。 Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏。 Goroutine Profiling： Goroutine 分析，可以对当前应用程序正在运行的 Goroutine 进行堆栈跟踪和分析。 Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况。 Block Profiling：阻塞分析，记录协程阻塞等待同步的情况。 采集后支持通过生成报告、终端命令行、Web界面的形式进行分析。
2. 使用方式 2.1 net/http/pprof 端口监听 该方式适合于服务型应用，通过添加监听端口，采集 HTTP Server 运行时的数据进行分析。
代码示例：开启一个协程监听一个端口，然后对一个字符串不断地追加内容。
package main import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; &amp;#34;time&amp;#34; ) var datas []string func main() { go func() { _ = http.</description>
    </item>
    
    <item>
      <title>Go Modules：Go的包管 理</title>
      <link>http://huanglianjing.com/posts/go-modulesgo%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 25 Jul 2023 01:52:02 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go-modulesgo%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description>1. Go Modules介绍 Go Modules是Go管理包的依赖的工具，自Go 1.11加入，以解决Go的依赖管理问题，淘汰了旧的GOPATH模式。
旧的GOPATH模式将代码存放在GOPATH/src目录下，通过go get来下载外部依赖包。但是GOPATH模式没有版本控制的概念，无法确保下载的依赖包是期望的版本。因此引入了Go Modules解决这些问题。
2. 使用Go Modules 首先要确保Go升级到了1.11或以上版本。
然后是设置GO111MODULE，GO111MODULE有三个值：off、on和auto（默认值）。
GO111MODULE=off：不支持modules功能，通过GOPATH来查找依赖包。 GO111MODULE=on：使用modules，完全不会通过GOPATH来查找依赖包。 GO111MODULE=auto：根据当前目录决定是否启用modules，当前目录在GOPATH/src之外，且包含go.mod文件或在包含go.mod文件的目录下面，就会启用modules。 设置GO111MODULE：
$ go env -w GO111MODULE=on # 设置GO111MODULE 当启用modules功能时，依赖包存放位置在GOPATH/pkg/mod，并且允许同一个package的多个版本并存，供项目指定引用。
3. go mod go mod带有多个命令，且会在项目中生成和维护go.mod、go.sum两个文件。
3.1 go.mod Go提供了go mod命令来管理包。
新建目录并初始化生成go.mod文件：
$ mkdir hehe $ cd hehe $ go mod init hehe # 初始化go.mod文件 新建go.mod后，当其他源文件引用了任何包时，go get、go build、go mod等命令都会更新go.mod文件，并会自动下载用到的依赖包。
生成的go.mod内容示例如下：
module hehe go 1.15 require ( github.com/labstack/echo v3.3.10+incompatible // indirect github.com/mattn/go-colorable v0.1.1 github.com/mattn/go-isatty v0.0.7 ) exclude ( go.</description>
    </item>
    
    <item>
      <title>Go安装和使用</title>
      <link>http://huanglianjing.com/posts/go%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:34 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>1. 安装 1.1 CentOS安装Go $ yum install golang 1.2 macOS安装Go macOS 可以通过 brew 安装 Go，需要先安装 brew。
$ brew install go 2. 工具 Go的工具链通过go命令配合子命令使用。
常用命令：
build 编译包和依赖 clean 删除目标文件 doc 显示文档 env 显示go环境变量 fmt 格式化代码 get 下载安装包和依赖 install 编译安装包和依赖 list 列出包 run 编译运行程序 test 测试包 version 显示go版本信息 vet 运行工具vet 执行工具：
$ go [commant] // 执行工具 $ go help [commant] // 查看工具文档 2.1 env 显示Go环境变量。
$ go env # 显示所有Go环境变量 $ go env GOPATH # 显示某个环境变量 $ go env -w GO111MODULE=on # 设置Go环境变量 $ go env -u GOPROXY # 取消env配置 GOPATH</description>
    </item>
    
    <item>
      <title>Go标准库：reflect</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93reflect/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:34 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93reflect/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/reflect
Go 标准库 reflect 用于运行时的映射，使程序运行时可以检查和操纵任意类型的对象。例如，在运行时获取一个任意类型 interface{} 的对象，并获取它的动态类型。
获取对象的类型并使用不同的取值方法：
for _, v := range []any{&amp;#34;hi&amp;#34;, 42, func() {}} { switch v := reflect.ValueOf(v); v.Kind() { case reflect.String: fmt.Println(v.String()) case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64: fmt.Println(v.Int()) default: fmt.Printf(&amp;#34;unhandled kind %s&amp;#34;, v.Kind()) } } 获取变量的类型：
var x int typ := reflect.TypeOf(x) fmt.Println(typ) 根据函数名调用对应函数：
func add(a int, b int) int { return a + b } var FuncMap = map[string]interface{}{ &amp;#34;add&amp;#34;: add, } funcName := &amp;#34;add&amp;#34; f := reflect.</description>
    </item>
    
    <item>
      <title>Go标准库：strconv</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93strconv/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:34 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93strconv/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/strconv
Go 标准库 strconv 用于字符串和其他类型的相互转化。
数字转化示例：
// 字符串转整数 i, err := strconv.Atoi(&amp;#34;-42&amp;#34;) // 整数转字符串 s := strconv.Itoa(-42) // 字符串转int，指定进制和位数 i, err := strconv.ParseInt(&amp;#34;-42&amp;#34;, 10, 64) // 数字转字符串 s := strconv.FormatInt(-42, 16) 2. 常量与变量 // IntSize int和uint的位数 const IntSize = intSize // ErrRange 值超出范围 var ErrRange = errors.New(&amp;#34;value out of range&amp;#34;) // ErrSyntax 语法错误 var ErrSyntax = errors.New(&amp;#34;invalid syntax&amp;#34;) 3. 函数 // Atoi string转int func Atoi(s string) (int, error) // Itoa int转string func Itoa(i int) string // 其他类型转string func FormatBool(b bool) string func FormatComplex(c complex128, fmt byte, prec, bitSize int) string func FormatFloat(f float64, fmt byte, prec, bitSize int) string func FormatInt(i int64, base int) string func FormatUint(i uint64, base int) string // string转其他类型 func ParseBool(str string) (bool, error) func ParseComplex(s string, bitSize int) (complex128, error) func ParseFloat(s string, bitSize int) (float64, error) func ParseInt(s string, base int, bitSize int) (i int64, err error) func ParseUint(s string, base int, bitSize int) (uint64, error) </description>
    </item>
    
    <item>
      <title>Go标准库：strings</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93strings/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:34 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93strings/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/strings
Go 标准库 strings 用于字符串相关的操作。
2. 类型 2.1 Builder 类型定义：
// Builder 字符串构建器 type Builder struct { // contains filtered or unexported fields } 方法：
// Cap 容量大小 func (b *Builder) Cap() int // Grow 增加容量 func (b *Builder) Grow(n int) // Len 字符串长度 func (b *Builder) Len() int // Reset 清空 func (b *Builder) Reset() // 返回现有的字符串 func (b *Builder) String() string // 追加内容 func (b *Builder) Write(p []byte) (int, error) func (b *Builder) WriteString(s string) (int, error) 2.</description>
    </item>
    
    <item>
      <title>Go标准库：time</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93time/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:34 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93time/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/time
Go 标准库 time 用于测量和展示时间。
一个计算代码耗时的例子：
start := time.Now() // do sth. end := time.Now elapsed := end.Sub(start) 2. 常量 时间单位常量：
const ( Nanosecond Duration = 1 Microsecond = 1000 * Nanosecond Millisecond = 1000 * Microsecond Second = 1000 * Millisecond Minute = 60 * Second Hour = 60 * Minute ) 月份常量：
const ( January Month = 1 + iota February March April May June July August September October November December ) 星期常量：</description>
    </item>
    
    <item>
      <title>Go标准库：context</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93context/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93context/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/context
Go 标准库 context 用于在函数调用、API调用、进程调用间传递上下文。
Go官方建议不要将 context 定义在其他结构体中，将 context 作为独立的参数传递给需要的函数且应该是首个参数，变量名一般使用 ctx。示例如下：
func DoSomething(ctx context.Context, arg Arg) error { // ... use ctx ... } context 在多个协程中同时使用是安全的。
2. 类型 2.1 Context 类型定义：
// Context 上下文 type Context interface { Deadline() (deadline time.Time, ok bool) // 被取消的时间 Done() &amp;lt;-chan struct{} // 返回一个通道，context被取消时关闭 Err() error // Done未关闭时返回nil，关闭时返回关闭原因 Value(key any) any // 获取key对应的val } 方法：
// Background 返回一个空的context，不会被取消，没有值，没有deadline，通常用于主函数、初始化、测试、最上层接收请求时 func Background() Context // TODO 返回一个空的context，不确定会用到context时使用 func TODO() Context // WithValue 返回父context的复制，并关联key-val func WithValue(parent Context, key, val any) Context 2.</description>
    </item>
    
    <item>
      <title>Go标准库：errors</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93errors/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93errors/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/errors
Go 标准库 errors 用于操作error。
如果一个error e包含以下任一方法，则可以包裹另一个error。
Unwrap() error Unwrap() []error 自定义error结构体示例：
type MyError struct { When time.Time What string } func (e MyError) Error() string { return fmt.Sprintf(&amp;#34;%v: %v&amp;#34;, e.When, e.What) } err := MyError{ time.Date(1989, 3, 15, 22, 30, 0, 0, time.UTC), &amp;#34;the file system has gone away&amp;#34;, } fmt.Println(err) 2. 函数 // New 创建error func New(text string) error // As err是否和target类型匹配，如果是则设置target的内容 func As(err error, target any) bool // Is err是否和target类型匹配 func Is(err, target error) bool // Join 将多个error包裹起来 func Join(errs .</description>
    </item>
    
    <item>
      <title>Go标准库：fmt</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93fmt/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93fmt/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/fmt
Go 标准库之 fmt 包实现了格式化 IO，也就是类似于 C 语言的 printf 和 scanf 方式的格式化。
控制格式化的字符串中，以百分号（%）作为格式的通配符，后面跟着不同的字母表示不同的类型格式。例如 %d 表示10进制整数，于是有以下例子：
import &amp;#34;fmt&amp;#34; func fmtTest() { i := 23 str := &amp;#34;good&amp;#34; fmt.Printf(&amp;#34;%d:%s\n&amp;#34;, i, str) } /* 输出结果 23:good */ %d 表示一个10进制整数，而 fmt.Printf() 方法在它的首个格式化字符串参数中找到它后，就从后续的参数里取到变量 i，将变量 i 的值输出到 %d 所占的位置。如果格式化字符串中包含多个以 % 表示的格式，就会依次从后面的参数中取参数值以格式所对应的类型，输出到那个位置。
2. 格式 通用格式：
%v 任何值的默认格式，对于结构体只会显示每个成员的值 %+v 对于结构体还会显示每个成员的字段名称 %#v Go语法的值，还会显示结构体的类型名 %T 值的类型 %% 表示百分号% 使用 %v 对于一些复合结构所打印的格式如下：
struct: {field0 field1 ...} array, slice: [elem0 elem1 .</description>
    </item>
    
    <item>
      <title>Go标准库：json</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93json/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93json/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/encoding/json
Go 标准库 encoding/json 用于进行json的编码和解码。
结构体编码为字符串示例：
type People struct { Name string `json:&amp;#34;name&amp;#34;` Age int64 `json:&amp;#34;age&amp;#34;` } p := People{Name: &amp;#34;Moondo&amp;#34;, Age: 10} marshal, err := json.Marshal(p) fmt.Printf(&amp;#34;%s\n&amp;#34;, marshal) 字符串解码为结构体示例：
type People struct { Name string `json:&amp;#34;name&amp;#34;` Age int64 `json:&amp;#34;age&amp;#34;` } str := &amp;#34;{\&amp;#34;name\&amp;#34;:\&amp;#34;Moondo\&amp;#34;,\&amp;#34;age\&amp;#34;:10}&amp;#34; var p People err := json.Unmarshal([]byte(str), &amp;amp;p) fmt.Printf(&amp;#34;%s\n&amp;#34;, p.Name) 2. 类型 2.1 RawMessage 类型定义：
// RawMessage json字符串 type RawMessage []byte 方法：
// MarshalJSON 编码并返回 func (m RawMessage) MarshalJSON() ([]byte, error) // UnmarshalJSON 从data赋值自身 func (m *RawMessage) UnmarshalJSON(data []byte) error 2.</description>
    </item>
    
    <item>
      <title>Go标准库：log</title>
      <link>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93log/</link>
      <pubDate>Tue, 25 Jul 2023 01:51:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E6%A0%87%E5%87%86%E5%BA%93log/</guid>
      <description>1. 介绍 文档地址：https://pkg.go.dev/log
Go 标准库 log 用于实现简单的日志打印功能。
指定日志文件打印日志：
type People struct { name string age int64 } func main() { logFile, _ := os.OpenFile(&amp;#34;log/info.log&amp;#34;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644) logger := log.New(logFile, &amp;#34;&amp;#34;, log.Ldate|log.Ltime) p := People{name: &amp;#34;moondo&amp;#34;, age: 20} logger.Printf(&amp;#34;%#v&amp;#34;, p) } 2. 常量 前缀常量，定义了日志每一行的前缀，各选项可以通过或运算组合起来：
const ( Ldate = 1 &amp;lt;&amp;lt; iota // the date in the local time zone: 2009/01/23 Ltime // the time in the local time zone: 01:23:23 Lmicroseconds // microsecond resolution: 01:23:23.</description>
    </item>
    
    <item>
      <title>Go基础语法</title>
      <link>http://huanglianjing.com/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 16 Jul 2023 18:17:33 +0800</pubDate>
      
      <guid>http://huanglianjing.com/posts/go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>1. 程序结构 1.1 名称 Go中函数、变量、常量、类型、语句标签、包的名称遵循规则：开头是一个字母或下划线，后面可以跟任意数量的字符、数字和下划线，并区分大小写。
对于语法中需要有变量名但程序逻辑用不到的，可以直接以一个下划线_表示空标识符。
关键字
Go有25个关键字，不能用于定义名称。
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 内置的预声明的常量、类型、函数
常量 true false itoa nil 类型 int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex64 complex128 bool byte rune string error 函数 make len cap new append copy close delete complex real imag panic recover 1.</description>
    </item>
    
  </channel>
</rss>
